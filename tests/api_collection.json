{
	"info": {
		"_postman_id": "b99d2fb0-ac8e-4e8c-ac60-79f3394d3c8e",
		"name": "Library Books API",
		"description": "This API showcases all the books available in the library. A POST request adds new books to the collection, while a GET request retrieves all books, with optional filters provided as query parameters. This API is designed for educational purposes for the API Essentials Developer Workshop.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "685238",
		"_collection_link": "https://www.postman.com/gold-capsule-38535/workspace/api-essentials-sandbox/collection/685238-b99d2fb0-ac8e-4e8c-ac60-79f3394d3c8e?action=share&source=collection_link&creator=685238"
	},
	"item": [
		{
			"name": "add books",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"//const myPackage = require('package-name');\r",
							"function abc() {\r",
							"    console.log(\"Hello World\"); // This will not be logged in Postman console\r",
							"}\r",
							"\r",
							"abc();"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"title\": \"{{bookTitle}}\",\n    \"author\": \"{{$randomFullName}}\",\n    \"genre\": \"fiction\",\n    \"yearPublished\": 2024\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/books",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"books"
					]
				},
				"description": "### Add Book to Library\n\nThis endpoint allows users to add a book to the library.\n\n#### Request Body\n\n- `title` (string, required): The title of the book.\n    \n- `author` (string, required): The author of the book.\n    \n- `genre` (string, required): The genre of the book.\n    \n- `yearPublished` (number, required): The year the book was published.\n    \n\n#### Response\n\n- `message` (string): A message confirming the success of the operation."
			},
			"response": [
				{
					"name": "add book",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"One Hundred Years of Solitude\",\n    \"author\": \"Gabriel García Márquez\",\n    \"genre\": \"fiction\",\n    \"yearPublished\": 1967\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/books",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"books"
							]
						}
					},
					"status": "Created",
					"code": 201,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Sat, 12 Jun 2021 00:44:00 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "16"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "x-powered-by",
							"value": "Express"
						},
						{
							"key": "etag",
							"value": "W/\"10-MxB4y4MLcx6QDsp8b8vgp7iFMFo\""
						}
					],
					"cookie": [],
					"body": "{\n    \"message\": \"OK\"\n}"
				}
			]
		},
		{
			"name": "all books",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/books",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"books"
					],
					"query": [
						{
							"key": "search",
							"value": "borges",
							"description": "a search string to be matched against author/title (example: borges). Case insensitive, partial match OK.",
							"disabled": true
						},
						{
							"key": "checkedOut",
							"value": "false",
							"description": "true/false",
							"disabled": true
						},
						{
							"key": "genre",
							"value": "fiction",
							"description": "filter by genre (case-insensitive, exact match)",
							"disabled": true
						}
					]
				},
				"description": "### Get Books\n\nThis endpoint retrieves a list of books.\n\n**Request Body**  \nThis request does not require a request body.\n\n**Response Body**  \nThe response will be a JSON array containing objects with the following properties:\n\n- `title` (string): The title of the book.\n    \n- `author` (string): The author of the book.\n    \n- `id` (string): The unique identifier of the book.\n    \n- `genre` (string): The genre of the book.\n    \n- `yearPublished` (number): The year the book was published.\n    \n- `checkedOut` (boolean): Indicates if the book is currently checked out.\n    \n- `createdAt` (string): The timestamp when the book record was created.\n    \n\n**Response JSON Schema**\n\n``` json\n[\n  {\n    \"type\": \"object\",\n    \"properties\": {\n      \"title\": { \"type\": \"string\" },\n      \"author\": { \"type\": \"string\" },\n      \"id\": { \"type\": \"string\" },\n      \"genre\": { \"type\": \"string\" },\n      \"yearPublished\": { \"type\": \"number\" },\n      \"checkedOut\": { \"type\": \"boolean\" },\n      \"createdAt\": { \"type\": \"string\" }\n    },\n    \"required\": [\"title\", \"author\", \"id\", \"genre\", \"yearPublished\", \"checkedOut\", \"createdAt\"]\n  }\n]\n\n ```"
			},
			"response": [
				{
					"name": "books",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/books",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"books"
							],
							"query": [
								{
									"key": "search",
									"value": "borges",
									"description": "a search string to be matched against author/title (example: borges). Case insensitive, partial match OK.",
									"disabled": true
								},
								{
									"key": "checkedOut",
									"value": "false",
									"description": "true/false",
									"disabled": true
								},
								{
									"key": "genre",
									"value": "fiction",
									"description": "filter by genre (case-insensitive, exact match)",
									"disabled": true
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Sat, 12 Jun 2021 00:41:42 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "4503"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "x-powered-by",
							"value": "Express"
						},
						{
							"key": "etag",
							"value": "W/\"1197-eLah3rmGpEn/V/gcfnJ7iyv+Foo\""
						}
					],
					"cookie": [],
					"body": "[\n    {\n        \"title\": \"Ficciones\",\n        \"author\": \"Jorge Luis Borges\",\n        \"id\": \"ZUST9JFx-Sd9X0k\",\n        \"genre\": \"fiction\",\n        \"yearPublished\": 1944,\n        \"checkedOut\": true,\n        \"createdAt\": \"2021-06-02 17:37:38\"\n    },\n    {\n        \"title\": \"Dust Tracks on a Road\",\n        \"author\": \"Zora Neale Hurston\",\n        \"id\": \"bJmPVX5oFzAQJwI\",\n        \"genre\": \"biography\",\n        \"yearPublished\": 1942,\n        \"checkedOut\": true,\n        \"createdAt\": \"2021-06-02 17:37:38\"\n    },\n    {\n        \"title\": \"Crime and Punishment\",\n        \"author\": \"Fyodor Dostoyevsky\",\n        \"id\": \"T1NwXSmVxnlxoeG\",\n        \"genre\": \"fiction\",\n        \"yearPublished\": 1866,\n        \"checkedOut\": true,\n        \"createdAt\": \"2021-06-02 17:37:38\"\n    },\n    {\n        \"title\": \"Domain-Driven Design: Tackling Complexity in the Heart of Software\",\n        \"author\": \"Eric Evans\",\n        \"id\": \"hHNwXjmjxnlxooP\",\n        \"genre\": \"computers\",\n        \"yearPublished\": 2003,\n        \"checkedOut\": false,\n        \"createdAt\": \"2021-06-02 17:37:38\"\n    },\n    {\n        \"title\": \"The Tale of Genji\",\n        \"author\": \"Murasaki Shikibu\",\n        \"id\": \"rclHV3DLWbJmquK\",\n        \"genre\": \"fiction\",\n        \"yearPublished\": 1021,\n        \"checkedOut\": false,\n        \"createdAt\": \"2021-06-02 17:37:38\"\n    },\n    {\n        \"title\": \"Patterns of Enterprise Application Architecture\",\n        \"author\": \"Martin Fowler\",\n        \"id\": \"uTYYlzvCQsaaSwj\",\n        \"genre\": \"computers\",\n        \"yearPublished\": 2002,\n        \"checkedOut\": false,\n        \"createdAt\": \"2021-06-02 17:37:38\"\n    },\n    {\n        \"title\": \"Competing Against Luck: The Story of Innovation and Customer Choice\",\n        \"author\": \"Clayton Christensen, Taddy Hall, Karen Dillon, David Duncan\",\n        \"id\": \"rebHV3JhWbJmcca\",\n        \"genre\": \"business\",\n        \"yearPublished\": 2016,\n        \"checkedOut\": false,\n        \"createdAt\": \"2021-06-02 17:37:38\"\n    },\n    {\n        \"title\": \"Beyond Violence\",\n        \"author\": \"Jiddu Krishnamurti\",\n        \"id\": \"pclHVVVqLWbJmqur\",\n        \"genre\": \"philosophy\",\n        \"yearPublished\": 1973,\n        \"checkedOut\": false,\n        \"createdAt\": \"2021-06-02 17:37:38\"\n    },\n    {\n        \"title\": \"Designing Data-Intensive Applications: The Big Ideas Behind Reliable, Scalable, and Maintainable Systems\",\n        \"author\": \"Martin Kleppmann\",\n        \"id\": \"HbQrRkNjJkalsS\",\n        \"genre\": \"computers\",\n        \"yearPublished\": 2017,\n        \"checkedOut\": false,\n        \"createdAt\": \"2021-06-02 17:37:38\"\n    },\n    {\n        \"title\": \"Colorless Tsukuru Tazaki and His Years of Pilgrimage\",\n        \"author\": \"Haruki Murakami\",\n        \"id\": \"eclHBBrLWbJmque\",\n        \"genre\": \"fiction\",\n        \"yearPublished\": 2013,\n        \"checkedOut\": false,\n        \"createdAt\": \"2021-06-02 17:37:38\"\n    },\n    {\n        \"title\": \"A Practical Approach to API Design\",\n        \"author\": \"D. Keith Casey Jr, James Higginbotham\",\n        \"id\": \"jclqjdUdBrLWDDmqp\",\n        \"genre\": \"computers\",\n        \"yearPublished\": 2013,\n        \"checkedOut\": false,\n        \"createdAt\": \"2021-06-02 17:37:38\"\n    },\n    {\n        \"title\": \"Go Design Patterns\",\n        \"author\": \"Mario Castro Contreras\",\n        \"id\": \"eeRplqnKkshdmqeeE\",\n        \"genre\": \"computers\",\n        \"yearPublished\": 2017,\n        \"checkedOut\": false,\n        \"createdAt\": \"2021-06-02 17:37:38\"\n    },\n    {\n        \"title\": \"The Joy Luck Club\",\n        \"author\": \"Amy Tan\",\n        \"id\": \"qqlHBBrLWbJmq_a\",\n        \"genre\": \"fiction\",\n        \"yearPublished\": 1989,\n        \"checkedOut\": false,\n        \"createdAt\": \"2021-06-02 17:37:38\"\n    },\n    {\n        \"title\": \"Anxious People\",\n        \"author\": \"Fredrik Backman\",\n        \"id\": \"MpNoarLWbJTwe\",\n        \"genre\": \"fiction\",\n        \"yearPublished\": 2019,\n        \"checkedOut\": false,\n        \"createdAt\": \"2021-06-02 17:37:38\"\n    },\n    {\n        \"title\": \"Continuous API Management: Making the Right Decisions in an Evolving Landscape\",\n        \"author\": \"Mehdi Medjaoui, Erik Wilde, Ronnie Mitra, Mike Amundsen\",\n        \"id\": \"ZxJksSDasdaO\",\n        \"genre\": \"computers\",\n        \"yearPublished\": 2018,\n        \"checkedOut\": false,\n        \"createdAt\": \"2021-06-02 17:37:38\"\n    },\n    {\n        \"title\": \"Learning GraphQL\",\n        \"author\": \"Eve Porcello, Alex Banks\",\n        \"id\": \"gqlHBBrLWbJmqgql\",\n        \"genre\": \"computers\",\n        \"yearPublished\": 2018,\n        \"checkedOut\": false,\n        \"createdAt\": \"2021-06-02 17:37:38\"\n    },\n    {\n        \"title\": \"Masala Lab: The Science of Indian Cooking\",\n        \"author\": \"Krish Ashok\",\n        \"id\": \"shrHcTrLWlJmquti\",\n        \"genre\": \"cooking\",\n        \"yearPublished\": 2020,\n        \"checkedOut\": false,\n        \"createdAt\": \"2021-06-02 17:37:38\"\n    },\n    {\n        \"title\": \"Refactoring\",\n        \"author\": \"Kent Beck, Martin Fowler\",\n        \"id\": \"aeSdkfhUSkdhHfo\",\n        \"genre\": \"computers\",\n        \"yearPublished\": 1999,\n        \"checkedOut\": false,\n        \"createdAt\": \"2021-06-02 17:37:38\"\n    },\n    {\n        \"title\": \"Consolation of Philosophy\",\n        \"author\": \"Boethius\",\n        \"id\": \"cpopeLmqgixdD\",\n        \"genre\": \"philosophy\",\n        \"yearPublished\": 524,\n        \"checkedOut\": false,\n        \"createdAt\": \"2021-06-02 17:37:38\"\n    },\n    {\n        \"title\": \"A Thousand Splendid Suns\",\n        \"author\": \"Khaled Hosseini\",\n        \"id\": \"qpBhlLWbJmqgg\",\n        \"genre\": \"fiction\",\n        \"yearPublished\": 2007,\n        \"checkedOut\": false,\n        \"createdAt\": \"2021-06-02 17:37:38\"\n    },\n    {\n        \"title\": \"The Wright Brothers\",\n        \"author\": \"David McCullough \",\n        \"id\": \"HjKaEeYYuiapA\",\n        \"genre\": \"history\",\n        \"yearPublished\": 2007,\n        \"checkedOut\": false,\n        \"createdAt\": \"2021-06-02 17:37:38\"\n    },\n    {\n        \"title\": \"RESTful Web APIs: Services for a Changing World\",\n        \"author\": \"Leonard Richardson, Mike Amundsen, Sam Ruby\",\n        \"id\": \"apilLWbJmqgop\",\n        \"genre\": \"computers\",\n        \"yearPublished\": 2013,\n        \"checkedOut\": false,\n        \"createdAt\": \"2021-06-02 17:37:38\"\n    },\n    {\n        \"title\": \"Creativity, Inc.\",\n        \"author\": \"Ed Catmull\",\n        \"id\": \"plRHqwwEJmqgoT\",\n        \"genre\": \"business\",\n        \"yearPublished\": 2014,\n        \"checkedOut\": false,\n        \"createdAt\": \"2021-06-02 17:37:38\"\n    }\n]"
				}
			]
		},
		{
			"name": "book by id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-mock-response-name",
						"value": "book",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{bookUrl}}/books/:id",
					"host": [
						"{{bookUrl}}"
					],
					"path": [
						"books",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{bookId}}"
						}
					]
				},
				"description": "## Get Book Details\n\nThis endpoint retrieves detailed information about a specific book identified by its unique ID. It is useful for obtaining the attributes of a book, such as its title, author, genre, publication year, and current checkout status.\n\n### Request\n\n- **Method**: GET\n    \n- **URL**: `{{bookUrl}}/books/:id`\n    \n- **Path Parameters**:\n    \n    - `id` (string): The unique identifier of the book you wish to retrieve. This parameter is required.\n        \n\n### Response\n\nOn a successful request, the API returns a JSON object containing the following fields:\n\n- `title` (string): The title of the book.\n    \n- `author` (string): The author of the book.\n    \n- `id` (string): The unique identifier for the book.\n    \n- `genre` (string): The genre of the book.\n    \n- `yearPublished` (integer): The year the book was published.\n    \n- `checkedOut` (boolean): Indicates whether the book is currently checked out.\n    \n- `createdAt` (string): The timestamp when the book record was created.\n    \n\n### Example Response\n\n``` json\n{\n  \"title\": \"\",\n  \"author\": \"\",\n  \"id\": \"\",\n  \"genre\": \"\",\n  \"yearPublished\": 0,\n  \"checkedOut\": true,\n  \"createdAt\": \"\"\n}\n\n ```\n\nThis endpoint is essential for applications that require detailed book information for display or processing."
			},
			"response": [
				{
					"name": "book",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/books/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"books",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{id}}"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Sat, 12 Jun 2021 00:43:31 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "164"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "x-powered-by",
							"value": "Express"
						},
						{
							"key": "etag",
							"value": "W/\"a4-YbCf8Nx5lqz4LotV0M4P+08vk5Y\""
						}
					],
					"cookie": [],
					"body": "{\n    \"title\": \"Dune\",\n    \"author\": \"Frank Herbert\",\n    \"id\": \"ZUST9JFx-Sd9X0k\",\n    \"genre\": \"fiction\",\n    \"yearPublished\": 1965,\n    \"checkedOut\": true,\n    \"createdAt\": \"2021-06-02 17:37:38\"\n}"
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://postman-library-api.glitch.me",
			"type": "string"
		},
		{
			"key": "bookTitle",
			"value": ""
		},
		{
			"key": "bookUrl",
			"value": "https://257441f2-9b02-4826-8458-b6ff1eed258a.mock.pstmn.io",
			"type": "string"
		},
		{
			"key": "bookId",
			"value": "ZUST9JFx-Sd9X0k",
			"type": "string"
		}
	]
}